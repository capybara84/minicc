translation_unit
    = {external_declaration}

external_declaration
	= [declaration_specifiers] [declarator ['=' initializer]
            { ',' declarator ['=' initializer]}]
            (';' | {declaration} compound_statement)

declaration
	= declaration_specifiers [init_declarator_list] ';'

declaration_specifiers
    = declaration_specifier {declaration_specifier}

declaration_specifier
	= storage_class_specifier | type_specifier | type_qualifier

storage_class_specifier
    = AUTO | REGISTER | STATIC | EXTERN | TYPEDEF

type_specifier
	= VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE
	| SIGNED | UNSIGNED | struct_or_union_specifier
	| enum_specifier | typedef_name

type_qualifier
	= CONST | VOLATILE

struct_or_union_specifier
	= struct_or_union [IDENTIFIER] '{' struct_declaration_list '}'
	= struct_or_union IDENTIFIER

struct_or_union
	= STRUCT | UNION

struct_declaration_list
    = struct_declaration {struct_declaration}

init_declarator_list
    = init_declarator {',' init_declarator}

init_declarator
	= declarator ['=' initializer]

struct_declaration
	= specifier_qualifier_list struct_declarator_list ';'

specifier_qualifier_list
    = (type_specifier | type_qualifier) {type_specifier | type_qualifier}

struct_declarator_list
    = struct_declarator {',' struct_declarator}

struct_declarator
	= declarator
	| [declarator] ':' constant_expression

enum_specifier
	= ENUM [IDENTIFIER] '{' enumerator_list '}'
	| ENUM IDENTIFIER

enumerator_list
    = enumerator {',' enumerator}

enumerator
    = IDENTIFIER ['=' constant_expression]

declarator
	= [pointer] (IDENTIFIER | '(' declarator ')')
                { '[' [constant_expression] ']'
                    | '(' parameter_type_list ')'
                    | '(' [identifier_list] ')' }

pointer
	= '*' type_qualifier_list {'*' type_qualifier_list}

type_qualifier_list
    = {type_qualifier}

parameter_type_list
    = parameter_list [',' '...']

parameter_list
	= parameter_declaration {',' parameter_declaration}

parameter_declaration
	= declaration_specifiers parameter_abstract_declarator

identifier_list
    = IDENTIFIER {',' IDENTIFIER}

initializer
    = assignment_expression
    | '{' initializer_list [','] '}'

initializer_list
    = initializer {',' initializer}

type_name
	= specifier_qualifier_list [abstract_declarator]

abstract_declarator
    = pointer
    | [pointer] '(' abstract_declarator ')'
                { '[' [constant_expression] ']'
                    | '(' [parameter_type_list] ')' }

parameter_abstract_declarator
    = [pointer] [IDENTIFIER | '(' parameter_abstract_declarator ')']
                { '[' [constant_expression] ']'
                    | '(' [parameter_type_list] ')'

typedef_name
    = IDENTIFIER

statement
	= labeled_statement
	| expression_statement
	| compound_statement
	| selection_statement
	| iteration_statement
	| jump_statement

labeled_statement
	= IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement

expression_statement
	= [expression] ';'

compound_statement
	= '{' {declaration} {statement} '}'

selection_statement
	= IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement
	| SWITCH '(' expression ')' statement

iteration_statement
	= WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' [expression] ';' [expression] ';' [expression] ')'
		statement

jump_statement
	= GOTO ID ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN [expression] ';'

constant_expression
    = conditional_expression

expression
	= assignment_expression {',' assignment_expression}

assignment_expression
	= conditional_expression
	| unary_expression assignment_operator assignment_expression

assignment_operator
	= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
	| '>>=' | '&=' | '^=' | '|='

conditional_expression
    = logical_or_expression ['?' expression ':' conditional_expression]

logical_or_expression
	= logical_and_expression {'||' logical_and_expression}

logical_and_expression
	= inclusive_or_expression {'&&' inclusive_or_expression}

inclusive_or_expression
	= exclusive_or_expression {'|' exclusive_or_expression}

exclusive_or_expression
	= and_expression {'^' and_expression}

and_expression
	= equality_expression {'&' equality_expression}

equality_expression
	= relational_expression {('=='|'!=') relational_expression}

relational_expression
	= shift_expression {('<'|'>'|'<='|'>=') shift_expression}

shift_expression
	= additive_expression {('<<'|'>>') additive_expression}

additive_expression
	= multiplicative_expression {('+'|'-') multiplicative_expression}

multiplicative_expression
	= cast_expression {('*'|'/'|'%') cast_expression}

cast_expression
    = unary_expression
    | '(' type_name ')' cast_expression

unary_expression
    = postfix_expression
    | '++' unary_expression
    | '--' unary_expression
    | unary_operator cast_expression
    | SIZEOF unary_expression
    | SIZEOF '(' type_name ')'

unary_operator
	= '&' | '*' | '+' | '-' | '~' | '!'

postfix_expression
    = primary_expression
    | postfix_expression '[' expression ']'
    | postfix_expression '(' [argument_expression_list] ')'
    | postfix_expression '.' IDENTIFIER
    | postfix_expression '->' IDENTIFIER
    | postfix_expression '++'
    | postfix_expression '--'

primary_expression
    = IDENTIFIER
    | constant
    | STRING
    | '(' expression ')'

argument_expression_list
    = assignment_expression {',' assignment_expression}

constant
    = INTEGER_CONSTANT
    | CHARACTER_CONSTANT
    | FLOATING_CONSTANT
    | ENUMERATION_CONSTANT

