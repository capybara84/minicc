test(1): <ID>
test(1): <INT LIT>
test(2): <ID>
test(2): <INT LIT>
test(3): <ID>
test(3): <INT LIT>
test(4): <ID>
test(4): <CHAR LIT>
test(4): <INT LIT>
test(4): <STRING LIT>
test(5): ,
test(5): ~
test(5): ;
test(5): :
test(5): ?
test(5): (
test(5): )
test(5): [
test(5): ]
test(5): {
test(5): }
test(5): .
test(5): ...
test(5): =
test(5): ==
test(5): !
test(5): !=
test(5): *
test(5): *=
test(5): /
test(5): /=
test(6): %
test(6): %=
test(6): ^
test(6): ^=
test(6): &
test(6): &&
test(6): &=
test(6): |
test(6): ||
test(6): |=
test(6): +
test(6): ++
test(6): +=
test(6): -
test(6): --
test(6): -=
test(6): ->
test(7): <
test(7): <<
test(7): <<=
test(7): <=
test(7): >
test(7): >>
test(7): >>=
test(7): >=
test(7): sizeof
test(7): typedef
test(7): extern
test(7): static
test(8): auto
test(8): register
test(8): char
test(8): short
test(8): int
test(8): long
test(8): signed
test(8): unsigned
test(9): float
test(9): double
test(9): const
test(9): volatile
test(9): void
test(9): struct
test(9): union
test(10): enum
test(10): if
test(10): else
test(10): switch
test(10): case
test(10): default
test(10): while
test(10): do
test(10): for
test(10): goto
test(11): continue
test(11): break
test(11): return
